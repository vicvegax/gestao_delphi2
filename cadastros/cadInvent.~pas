unit cadInvent;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.ExtCtrls, Vcl.DBCtrls,
  Vcl.Grids, Vcl.DBGrids, Vcl.StdCtrls, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, Vcl.Mask, Vcl.Buttons, modFuncoes, cxGraphics,
  cxControls, cxLookAndFeels, cxLookAndFeelPainters, cxContainer, cxEdit,
  Vcl.ComCtrls, dxCore, cxDateUtils, cxDropDownEdit, cxLookupEdit,
  cxDBLookupEdit, cxDBLookupComboBox, cxSpinEdit, cxCurrencyEdit, cxTextEdit,
  cxMaskEdit, cxCalendar, DateUtils, zeroEdit, cxStyles, cxCustomData,
  cxFilter, cxData, cxDataStorage, cxNavigator, dxDateRanges,
  dxScrollbarAnnotations, cxDBData, cxGridCustomTableView, cxGridTableView,
  cxGridDBTableView, cxGridLevel, cxClasses, cxGridCustomView, cxGrid,
  cxLabel, frxClass, frxDBSet, MaskUtils;

type
  TfcadInvent = class(TForm)
    dsRec: TDataSource;
    qyRec: TFDQuery;
    pcInv: TPanel;
    Label3: TLabel;
    Label4: TLabel;
    cbAtivo: TComboBox;
    edOBS: TMemo;
    Label7: TLabel;
    Label8: TLabel;
    edDTCOM: TcxDateEdit;
    edVLCOM: TcxCurrencyEdit;
    Label9: TLabel;
    edVIDUTIL: TcxSpinEdit;
    Label10: TLabel;
    cbSITUA: TComboBox;
    Label11: TLabel;
    edVLDEP: TEdit;
    Label13: TLabel;
    edDTMAN: TcxDateEdit;
    Label12: TLabel;
    edDTINCOR: TcxDateEdit;
    Label15: TLabel;
    cbTPINCOR: TComboBox;
    pnIDUNI: TPanel;
    Label1: TLabel;
    edDESCR: TEdit;
    Label5: TLabel;
    edID: TEdit;
    Label2: TLabel;
    edCod: TzeroEdit;
    edFABRI: TEdit;
    Label16: TLabel;
    edMODEL: TEdit;
    Label17: TLabel;
    edNRSER: TEdit;
    Label18: TLabel;
    edNFISC: TEdit;
    Label19: TLabel;
    Label20: TLabel;
    edGARAN: TcxDateEdit;
    Label21: TLabel;
    edFORNE: TEdit;
    Label14: TLabel;
    chREP2: TCheckBox;
    chREP3: TCheckBox;
    chREP4: TCheckBox;
    edIDUNI: TzeroEdit;
    cbIDUNI: TcxLookupComboBox;
    edPTUNI: TzeroEdit;
    qyRecdscat_calc: TStringField;
    qyReccdcat_calc: TStringField;
    qyRecdt_comp: TDateField;
    qyRecvl_comp: TBCDField;
    qyRecvid_util: TWordField;
    gridMov: TcxGrid;
    gviewMov: TcxGridDBTableView;
    glevelMov: TcxGridLevel;
    colDSCAT: TcxGridDBColumn;
    gviewMovcod: TcxGridDBColumn;
    gviewMovdescr: TcxGridDBColumn;
    gviewMovdt_comp: TcxGridDBColumn;
    gviewMovvl_comp: TcxGridDBColumn;
    gviewMovvid_util: TcxGridDBColumn;
    gviewMovobs: TcxGridDBColumn;
    gviewMovsitua: TcxGridDBColumn;
    gviewMovfabri: TcxGridDBColumn;
    gviewMovmodel: TcxGridDBColumn;
    gviewMovnrser: TcxGridDBColumn;
    gviewMovnfisc: TcxGridDBColumn;
    gviewMovgaran: TcxGridDBColumn;
    gviewMovforne: TcxGridDBColumn;
    dscat: TDataSource;
    qycat: TFDQuery;
    dsuni: TDataSource;
    qyuni: TFDQuery;
    qycatdescr2: TStringField;
    qyunidescr2: TStringField;
    qyunicodpt: TStringField;
    gviewMovColumn1: TcxGridDBColumn;
    pnIDCAT: TPanel;
    Label6: TLabel;
    chREPCAT: TCheckBox;
    edIDCAT: TzeroEdit;
    cbIDCAT: TcxLookupComboBox;
    chREPUNI: TCheckBox;
    colIDUNI: TcxGridDBColumn;
    colDSUNI: TcxGridDBColumn;
    qyReccduni_calc: TStringField;
    qyRecdsuni_calc: TStringField;
    frxDBR: TfrxDBDataset;
    qyRecid: TWordField;
    qyRecdescr: TStringField;
    qyRecnrser: TStringField;
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure edENTER_KeyPress(Sender: TObject; var Key: Char);
    procedure edDTINCORExit(Sender: TObject);
    procedure edIDUNIChange(Sender: TObject);
    procedure edIDUNIExit(Sender: TObject);
    procedure edIDCATChange(Sender: TObject);
    procedure edIDCATExit(Sender: TObject);
    procedure cbIDCATPropertiesEditValueChanged(Sender: TObject);
    procedure edProxFocusKeyPress(Sender: TObject; var Key: Char);
    procedure cbIDUNIPropertiesEditValueChanged(Sender: TObject);
    procedure edPTUNIChange(Sender: TObject);
    procedure qyRecCalcFields(DataSet: TDataSet);
    procedure cbIDUNIDblClick(Sender: TObject);
    procedure gviewMovDblClick(Sender: TObject);
    procedure qycatCalcFields(DataSet: TDataSet);
    procedure qyuniCalcFields(DataSet: TDataSet);
    procedure FormDestroy(Sender: TObject);
    procedure gviewMovFocusedRecordChanged(Sender: TcxCustomGridTableView;
      APrevFocusedRecord, AFocusedRecord: TcxCustomGridRecord;
      ANewItemRecordFocusingChanged: Boolean);
    procedure gviewMovColumn1GetDataText(Sender: TcxCustomGridTableItem;
      ARecordIndex: Integer; var AText: string);
    procedure edDESCRExit(Sender: TObject);
  private
    { Private declarations }
    qtModoInc: Integer;
    modoUNIDADE: boolean;

    function ExeAcao: Boolean;
    function ChkCampos: Boolean;
    procedure preCampos;
    procedure WMACAO(var Msg: TMessage); message WM_ACAO;
    procedure LimpaCampos;
    procedure FiltraTabela;

  public
    { Public declarations }
    constructor Create(AOwner: TComponent; Unidade: Boolean); reintroduce;
  end;

var
  fcadInvent: TfcadInvent;

implementation

{$R *.dfm}

uses modDados, moverInvent, aguarde;

function TfcadInvent.ExeAcao: Boolean;
var
  bLocId, bLocReg: Boolean;

  idLocOri: Integer;
  idLocDst: Integer;
  obs: string;
  // dtManOri: TDate;
  permis: String;
begin
  Result := False;
  permis:= 'cadBens';
  if (wModo = modoInc) and (not DM.permitido(permis + 'I')) then begin
      MsgErro(msgIncNaoPermitida);
      exit;
  end else if (wModo = modoAlt) and (not DM.permitido(permis + 'A')) then begin
      MsgErro(msgAltNaoPermitida);
      exit;
  end else if (wModo = modoExc) and (not DM.permitido(permis + 'E')) then begin
      MsgErro(msgExcNaoPermitida);
      exit;
  end;

  edDESCR.Text := Trim(removeAcento(edDESCR.Text));
  if (not ChkCampos) then Exit;
  // qyRec.DisableControls;
  bLocReg := False; // qyRec.Locate('cod', edCod.Text, []);
  bLocId := False;
  if (wModo <> modoInc) then
    bLocId := qyRec.Locate('id', edID.Text, []);

  if not(wModo = modoExc) then begin
    if (wModo = modoInc) then begin //INCLUSÃO
      if (bLocReg) then begin
        MsgErro(Format(kJaCad, ['Bens e Materiais']));
        Exit;
      end;
      if (not perguntaSim(kMsgInc, kModo[wModo])) then Exit;
    end else begin //ALTERAÇÃO
      if (not bLocId) then begin
        MsgErro(Format(kNaoLoc, ['Bens e Materiais']));
        Exit;
      end;
      if (not perguntaSim(kMsgAlt, kModo[wModo])) then Exit;
    end; // if
    //idLocDst := StrToInt(cbIDUNI.EditValue);
    //idLocOri := -1;
    //if (wModo = modoAlt) then idLocOri := qyRec.FieldByName('id_uni').AsInteger;

    //if (idLocOri <> -1) and (idLocOri <> idLocDst) then begin
   //   if (not perguntaSim('Mudar o Local atual do item selecionado?', 'Mudança de Local')) then Exit;
    //end;

    DM.DBCON.StartTransaction;
    with qyRec do begin
      if (wModo = modoInc) then begin
        Append;
        FieldByName('US_INC').AsInteger := wUsuario;
        FieldByName('DT_INC').AsDateTime := Now;
        FieldValues['st_ini']:= cSTNOR;
        FieldValues['st_FIM']:= cSTNOR;
      end else begin
        DM.criaLogTab(qyrec, 'tbinvent', cSTALT);
        Edit;
        FieldByName('US_ALT').AsInteger := wUsuario;
        FieldByName('DT_ALT').AsDateTime := Now;
        FieldValues['st_ini']:= cSTALT;
      end;
      FieldByName('DESCR').AsString := edDESCR.Text;
      FieldByName('cod').AsString := edCod.Text;

      FieldByName('fabri').AsString := edFABRI.Text;
      FieldByName('model').AsString := edMODEL.Text;
      FieldByName('nrser').AsString := edNRSER.Text;
      FieldByName('nfisc').AsString := edNFISC.Text;
      FieldByName('garan').AsVariant := edGARAN.EditValue;
      FieldByName('FORNE').AsString := edFORNE.Text;

      FieldByName('ativo').AsInteger := cbAtivo.ItemIndex;
      FieldByName('obs').AsString := edOBS.Lines.Text;
      FieldByName('ativo').AsInteger := cbAtivo.ItemIndex;
      FieldByName('id_uni').AsInteger := cbIDUNI.EditValue;
      FieldByName('id_cat').AsInteger := cbIDCAT.EditValue;
      FieldByName('dt_man').AsVariant := edDTMAN.EditValue;
      FieldByName('dt_comp').AsVariant := edDTCOM.EditValue;
      FieldByName('vl_comp').AsFloat := edVLCOM.Value;
      FieldByName('vid_util').AsInteger := edVIDUTIL.Value;
      FieldByName('situa').AsInteger := cbSITUA.ItemIndex;
      FieldByName('dt_incor').AsVariant := edDTINCOR.EditValue;
      FieldByName('tp_incor').AsInteger := cbTPINCOR.ItemIndex;
      Post;
    end;
    DM.DBCON.Commit;
    Result := true;
  end else begin //exclusão
    if (not bLocId) then begin
      MsgErro(Format(kNaoLoc, ['Bens e Materiais']));
      Exit;
    end;

    if perguntaNao(kMsgExc, kModo[wModo]) then begin
      if perguntaNao(kMsgExcCtz, kModo[wModo]) then begin
        if DM.obsBox('Motivo da Exclusão',
          'Informe por que está Excluindo este lançamento:', obs) then begin

          qyrec.Edit;
          //DM.marcaExclusao(qyrec);
          qyrec['us_exc']:= wUsuario;
          qyrec['dt_exc']:= Now;
          qyrec.FieldByName('obs_exc').AsString := obs;
          qyrec['st_FIM']:= cSTEXC;
          qyrec.Post;
          Result := true;
        end;
      end;
    end;
  end;
  LimpaCampos;
  MudaModo(modoInc);
end;

procedure TfcadInvent.cbIDCATPropertiesEditValueChanged(Sender: TObject);
begin
  if cbIDCAT.Tag = 0 then begin // permite o OnChange
    edIDCAT.Tag := 1; // DESATIVA o OnChange
    edIDCAT.Value := '';
    if qyCAT.Locate('id', cbIDCAT.EditValue, []) then begin
      edIDCAT.Value := qyCAT.FieldByName('cod').AsString;
      if not modoUnidade then FiltraTabela;
    end;
    edIDCAT.Tag := 0; // Ativa o OnChange
  end;

end;

procedure TfcadInvent.cbIDUNIDblClick(Sender: TObject);
begin
  // ShowMessage(inttostr(cbIDUNI.ItemIndex));

end;

procedure TfcadInvent.cbIDUNIPropertiesEditValueChanged(Sender: TObject);
begin
  if cbIDUNI.Tag = 0 then begin // permite o OnChange
    edIDUNI.Tag := 1; // DESATIVA o OnChange
    edIDUNI.Value := '';
    edPTUNI.Value := '1';
    if qyuni.Locate('id', cbIDUNI.EditValue, []) then begin
      edIDUNI.Value := qyuni.FieldByName('cod').AsString;
      edPTUNI.Value := qyuni.FieldByName('ponto').AsString;
      if modoUnidade then FiltraTabela;
    end;
    edIDUNI.Tag := 0; // Ativa o OnChange
  end;

end;

function TfcadInvent.ChkCampos: Boolean;
begin
  Result := False;
  if (cbIDUNI.ItemIndex < 0) then
  begin
    msgPreen('Unidade');
    edIDUNI.SetFocus;
    Exit;
  end;
  if (cbIDCAT.ItemIndex < 0) then
  begin
    msgPreen('Categoria');
    edIDCAT.SetFocus;
    Exit;
  end;
  if (length(edDESCR.Text) = 0) then
  begin
    msgPreen('Descrição do Inventário (Bem)');
    edDESCR.SetFocus;
    Exit;
  end;
  if edCOD.Text = '' then
    edCod.Text := DM.DBCON.ExecSQLScalar('select coalesce(max(cod)+1,1) from tbinvent');
  Result := true;
end;

constructor TfcadInvent.Create(AOwner: TComponent; Unidade: Boolean);
begin
  inherited Create(AOwner);

  gridMov.Align := alClient;
//  qyCAT.Open('SELECT id, concat(descr, if(ativo = 0, " (INATIVO)", "")) as descr, cod FROM tbcateg WHERE (ativo >= 0) ORDER BY cod');
//  qyuni.Open('SELECT id, concat(descr, if(ativo = 0, " (INATIVO)", "")) as descr, codpt, cod FROM tbunidades WHERE (ativo >= 0) ORDER BY cod');
  qyCAT.Open('SELECT id, descr, cod, ativo FROM tbcateg WHERE (ativo >= 0) ORDER BY cod');
  qyuni.Open('SELECT id, descr, cod, ponto, ativo FROM tbunidades WHERE (ativo >= 0) ORDER BY codpt');

  modoUnidade:= Unidade;
  if modoUnidade then begin
    cbIDUNI.EditValue := DM.DBCON.ExecSQLScalar('SELECT id FROM tbunidades WHERE ativo = 1 order by descr ASC limit 1');
    pnIDUNI.Top:= 0;
    pnIDUNI.TabOrder:= 0;
    pnIDCAT.TabOrder:= 1;
    colIDUNI.Visible:= False;
    colDSUNI.Visible:= false;
    chREPUNI.Checked:= True;
    chREPUNI.Enabled:= False;

    qyrec.IndexFieldNames:= 'dscat_calc;descr';
  end else begin
    cbIDCAT.ItemIndex:= 0;
    pnIDCAT.Top:= 0;
    pnIDCAT.TabOrder:= 0;
    pnIDUNI.TabOrder:= 1;
    colDSCAT.Visible:= False;
    chREPCAT.Checked:= True;
    chREPCAT.Enabled:= False;
    qyrec.IndexFieldNames:= 'dsuni_calc;descr';
  end;
  //cbIDUNI.ItemIndex:= 0;

end;

procedure TfcadInvent.edDESCRExit(Sender: TObject);
begin
  edDESCR.Text := Trim(removeAcento(edDESCR.Text));
end;

procedure TfcadInvent.edDTINCORExit(Sender: TObject);
begin
  // edDTINCOR.PostEditValue;
end;

procedure TfcadInvent.edENTER_KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = kENTER) then
  begin
    Key := #0;
    ExeAcao;
  end;
end;

procedure TfcadInvent.edIDCATChange(Sender: TObject);
begin
  if edIDCAT.Tag = 0 then
  begin // permite o OnChange
    cbIDCAT.Tag := 1; // DESATIVA o OnChange, usado no OnExit
    cbIDCAT.Clear;
    if length(edIDCAT.Value) > 0 then begin
      if qyCAT.Locate('cod', edIDCAT.Value, [loPartialKey]) then begin
        cbIDCAT.EditValue := qyCAT.FieldByName('id').AsInteger;
        cbIDCAT.Tag := 2; // confirma que localizou, usado no OnExit
      end;
    end else begin // campo está vazio
      cbIDCAT.Tag := 0; // Ativa o OnChange
    end;
  end;

end;

procedure TfcadInvent.edIDCATExit(Sender: TObject);
begin
  edIDCAT.Tag := 1; // DESATIVA o OnChange
  if cbIDCAT.Tag = 2 then // se localizou
    edIDCAT.Value := qyCAT.FieldByName('cod').AsString // preenche o campo
  else if cbIDCAT.Tag = 1 then // NÃO localizou
    edIDCAT.Clear; // limpa o campos
  cbIDCAT.Tag := 0; // Ativa o OnChange
  edIDCAT.Tag := 0; // Ativa o OnChange

end;

procedure TfcadInvent.edProxFocusKeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = kENTER) then
  begin
    Key := #0;
    ProxFocus;
  end;

end;

procedure TfcadInvent.edPTUNIChange(Sender: TObject);
begin
  if edIDUNI.Tag = 0 then
  begin // permite o OnChange
    cbIDUNI.Tag := 1;
    // DESATIVA o OnChange, usado no OnExit e marca como Não localizado
    cbIDUNI.ItemIndex := -1;
    if length(edIDUNI.Value) > 0 then
    begin
      if qyuni.Locate('codpt', edIDUNI.Value+ edPTUNI.Value, []) then
      begin
        cbIDUNI.EditValue := qyuni.FieldByName('id').AsInteger;
        cbIDUNI.Tag := 2; // confirma que localizou, usado no OnExit
      end;
    end
    else
      cbIDUNI.Tag := 0;
    FiltraTabela;
  end;

end;

procedure TfcadInvent.edIDUNIChange(Sender: TObject);
begin
  if edIDUNI.Tag = 0 then
  begin // permite o OnChange
    cbIDUNI.Tag := 1; // DESATIVA o OnChange, usado no OnExit
    cbIDUNI.ItemIndex := -1;
    if length(edIDUNI.Value) > 0 then begin
      if qyuni.Locate('codpt', edIDUNI.Value + edPTUNI.Value, []) then begin
        cbIDUNI.EditValue := qyuni.FieldByName('id').AsInteger;
        cbIDUNI.Tag := 2; // confirma que localizou, usado no OnExit
      end;
    end else begin // campo está vazio
      cbIDUNI.Tag := 0; // Ativa o OnChange
    end;
    FiltraTabela;
  end;

end;

procedure TfcadInvent.edIDUNIExit(Sender: TObject);
begin
  edIDUNI.Tag := 1; // DESATIVA o OnChange
  if cbIDUNI.Tag = 1 then
  begin // não foi localizado
    edIDUNI.Clear; // limpa o campo
    edPTUNI.Value := '1'
  end;
  cbIDUNI.Tag := 0; // Ativa o OnChange
  edIDUNI.Tag := 0; // Ativa o OnChange

end;

procedure TfcadInvent.FiltraTabela;
var
  sql: string;
  order: string;
begin
  qyrec.Close;

  qyRec.Filter := ' st_fim = ' + quotedstr(cSTNOR) + ' and ';

  if modoUnidade then begin
    if cbIDUNI.EditValue < 0 then exit;
    qyRec.Filter:= qyRec.Filter + 'id_uni = ' + vartostr(cbIDUNI.EditValue);
    sql:= 'id_uni = "' + vartostr(cbIDUNI.EditValue) + '" and ';
    order:= 'id_uni, id_cat';
  end else begin
    if cbIDCAT.EditValue < 0 then exit;
    qyRec.Filter:= qyRec.Filter + 'id_cat = ' + vartostr(cbIDCAT.EditValue);
    sql:= 'id_cat = "' + vartostr(cbIDCAT.EditValue) + '" and ';
    order:= 'id_cat, id_uni';
  end;

  qyRec.Filtered := true;
  qyRec.Open('select * from tbinvent where ' +
    sql +
    'st_fim = "' + cSTNOR + '" and ' +
    'ativo >= 0 ORDER BY ' + order);
end;

procedure TfcadInvent.FormCreate(Sender: TObject);
begin
  //inherited create
end;

procedure TfcadInvent.FormDestroy(Sender: TObject);
begin
  qyRec.Close;
  qyCAT.Close;
  qyuni.Close;

end;

procedure TfcadInvent.FormShow(Sender: TObject);
begin
  // edDESCR.SetFocus;
  LimpaCampos;
  // qtModoInc:= -1;
end;

procedure TfcadInvent.gviewMovColumn1GetDataText(
  Sender: TcxCustomGridTableItem; ARecordIndex: Integer;
  var AText: string);
var
  AIndex: Integer;
begin
  AIndex := TcxGridTableView(Sender.GridView)
    .DataController.GetRowIndexByRecordIndex(ARecordIndex, False);
  AText := IntToStr(AIndex + 1);
end;

procedure TfcadInvent.gviewMovDblClick(Sender: TObject);
var
  APoint: TPoint;
  AHitTest: TcxCustomGridHitTest;
begin

  GetCursorPos(APoint);
  with gridMov.FocusedView.Site do
  begin
    APoint := ScreenToClient(APoint);
    AHitTest := ViewInfo.GetHitTest(APoint);
    if AHitTest is TcxGridRecordHitTest then
    begin
      preCampos;
      qtModoInc := 0;
      MudaModo(modoAlt);
    end;
  end;
end;

procedure TfcadInvent.gviewMovFocusedRecordChanged(
  Sender: TcxCustomGridTableView; APrevFocusedRecord,
  AFocusedRecord: TcxCustomGridRecord;
  ANewItemRecordFocusingChanged: Boolean);
begin
//exit;
//  preCampos;
  if(wModo = modoAlt) then begin
    LimpaCampos;
    MudaModo(modoInc);
  end;
end;

procedure TfcadInvent.LimpaCampos;
begin
  if (not chREPCAT.Checked) and (modoUnidade) then
    cbIDCAT.ItemIndex := -1;

  if (not chREPUNI.Checked) and (not modoUnidade) then
    cbIDUNI.ItemIndex := -1;

  if not chREP2.Checked then edDESCR.Text := '';
  edCod.Text := DM.DBCON.ExecSQLScalar('select coalesce(max(cod)+1,1) from tbinvent');

  edFABRI.Clear;
  edMODEL.Clear;
  if not chREP3.Checked then
    edNRSER.Clear;
  edNFISC.Clear;
  edGARAN.Clear;
  edFORNE.Clear;
  edDTCOM.EditValue := null;
  edVLCOM.Value := 0;

  cbSITUA.ItemIndex := 1;
  edVIDUTIL.Value := 0;
  edVLDEP.Text := '';

  cbAtivo.ItemIndex := 1;
  edDTMAN.EditValue := null;
  // cbIdcus.ItemIndex:= -1;
  if not chREP4.Checked then
    edDTINCOR.EditValue := null;
  cbTPINCOR.ItemIndex := 0;
  edOBS.Lines.Clear;
  edID.Text := kNovoId;
  qtModoInc := 0;
end;

procedure TfcadInvent.preCampos;
var
  dVLDEP: double;
begin
  with qyRec do begin
    if modoUNIDADE then cbIDCAT.EditValue := FieldByName('id_cat').AsInteger
    else cbIDUNI.EditValue:= FieldValues['id_uni'];

    edDESCR.Text := FieldByName('DESCR').AsString;
    edCod.Text := FieldByName('Cod').AsString;
    edFABRI.Text := FieldByName('fabri').AsString;
    edMODEL.Text := FieldByName('model').AsString;
    edNRSER.Text := FieldByName('nrser').AsString;
    edNFISC.Text := FieldByName('nfisc').AsString;
    edGARAN.EditValue := FieldByName('garan').AsVariant;
    edFORNE.Text := FieldByName('FORNE').AsString;
    cbAtivo.ItemIndex := FieldByName('ativo').AsInteger;
    edOBS.Lines.Text := FieldByName('obs').AsString;
    // edDTCOM.EditValue:= null;
    edDTCOM.EditValue := FieldByName('dt_comp').AsVariant;
    // if edDTCOM.EditValue = 0 then edDTCOM.EditValue:= null;
    edVLCOM.Value := FieldByName('vl_comp').AsFloat;
    edDTMAN.EditValue := FieldByName('dt_man').AsVariant;
    // if edDTMAN.EditValue = 0 then edDTMAN.EditValue:= null;
    edVIDUTIL.Value := FieldByName('vid_util').AsInteger;
    // cbidcus.EditValue:= fieldByname('id_cus').AsString;
    edDTINCOR.EditValue := FieldByName('dt_incor').AsVariant;
    // if edDTINCOR.EditValue = 0 then edDTINCOR.EditValue:= null;
    cbTPINCOR.ItemIndex := FieldByName('tp_incor').AsInteger;

    dVLDEP := edVLCOM.Value - ((edVLCOM.Value / (edVIDUTIL.Value * 12)) * MonthsBetween(Date, edDTCOM.Date));
    if dVLDEP.IsNan then dVLDEP:= 0;

    edVLDEP.Text := FormatFloat(',0.00', dVLDEP);

    if not(wModo = modoInc) then begin
      edID.Text := FieldByName('id').AsString;
      // qyMov.Filter:= ' id_inv = ' + edID.Text;
    end;
  end;
end;

procedure TfcadInvent.qycatCalcFields(DataSet: TDataSet);
var
  st: string;
begin
  st:= Dataset.FieldValues['descr'];
  if dataset.FieldValues['ativo'] = 0 then st:= st + strINATIVO;

  Dataset.FieldValues['descr2']:= st;

end;

procedure TfcadInvent.qyRecCalcFields(DataSet: TDataSet);
begin
  if not modoUnidade then begin

    if qyuni.Locate('id', DataSet['id_uni'], []) then begin
      //st := qyuni.FieldByName('descr').AsString;
      //if qyuni.FieldValues['ativo'] = 0 then st:= st + ' (INATIVO)';

      DataSet['dsuni_calc']:= qyuni['descr'];
      DataSet['cduni_calc']:= formatmasktext('9999.99;0;_', qyuni['codpt']);
    end;
  end else begin
    if qyCAT.Locate('id', DataSet['id_cat'], []) then begin
      DataSet['dscat_calc']:= qyCAT['descr2'];
      DataSet['cdcat_calc']:= qyCAT['cod'];
    end;
  end;
end;

procedure TfcadInvent.qyuniCalcFields(DataSet: TDataSet);
var
  st: string;
begin
  st:= Dataset.FieldValues['descr'];
  if dataset.FieldValues['ativo'] = 0 then st:= st + strINATIVO;

  Dataset.FieldValues['descr2']:= st;
  Dataset.FieldValues['codpt']:= Dataset.FieldValues['cod'] + Dataset.FieldValues['ponto'];
end;

procedure TfcadInvent.WMACAO(var Msg: TMessage);
var
  mover_iduni: integer;
  mover_obs: string;
begin
  if Msg.wParam = wpModo then begin
    gviewMov.Controller.ClearSelection;
    if Msg.LParam <> modoInc then begin
      if (qyRec.RecordCount > 0) then begin
        preCampos;
        if wModo = modoExc then ExeAcao; //Confirma Exclusão de imediato - 13/12/23
      end else begin
        MudaModo(modoInc);
      end;
      qtModoInc := 0;
    end else begin
      edID.Text := kNovoId;
      // qyMov.Filter:= ' id_inv = -1';
      inc(qtModoInc);
      if (qtModoInc > 1) then begin
        LimpaCampos;
        qtModoInc := 0;
      end;
    end;
    // if pcInv.ActivePage = tsCad then
    if modoUnidade then edIDCAT.SetFocus
    else edIDUNI.SetFocus;
  end else if Msg.wParam = wpConfirma then begin
    ExeAcao;
  end else if Msg.wParam = wpGenerico then begin
    if qyrec.RecordCount = 0 then exit;

    preCampos;
    mover_iduni:= 0;
    //ShowMessage('Generico Clicado!');
    with TfmoverInvent.Create(Self) do begin
      edDESCR.Text:= Self.edDESCR.Text;
      edUNI.Text:= Self.edIDUNI.Text + '.' + Self.edPTUNI.Text + ' - ' + Self.cbIDUNI.Text;
      edUNI.Tag:= Self.cbIDUNI.EditValue;
      edCAT.Text:= Self.edIDCAT.Text + ' - ' + Self.cbIDCAT.Text;
      edCAT.Tag:= Self.cbIDCAT.EditValue;
      cbIDUNI.Properties.ListSource:= dsuni;
      cbIDUNI.EditValue:= Self.cbIDUNI.EditValue;
      cbIDCAT.Properties.ListSource:= dscat;
      cbIDCAT.EditValue:= Self.cbIDCAT.EditValue;
      edOBS.Text:= Self.edOBS.Text;
      if ShowModal = mrOK then begin
         mover_iduni:= cbIDUNI.EditValue;
         mover_obs:= edOBS.Text;
      end;

      Free;
    end;
    if mover_iduni>0 then begin
        fAguarde:= TfAguarde.create(nil);
        fAguarde.Show;
        Application.ProcessMessages;
        DM.DBCON.StartTransaction;
        DM.criaLogTab(qyrec, 'tbinvent', cSTESTMOV);
        qyrec.Edit;
        qyrec['US_ALT']:= wUsuario;
        qyrec['DT_ALT']:= Now;
        qyrec['st_ini']:= cSTESTMOV;
        qyrec['id_uni']:= mover_iduni;
        qyrec['obs']:= mover_obs;
        qyrec.Post;
        DM.DBCON.Commit;
        faguarde.Hide;
        faguarde.Free;
      ShowMessage('Trasnferência Concluída!');
    end;
  end else if Msg.wParam = wpExportar then begin
    gviewMov.BeginUpdate();
    if modoUnidade  then begin
      //qyrec.IndexFieldNames:= 'dscat_calc';
      DM.LoadReport('inventPorLocal');
      DM.frxRel.Variables['GRUPO'] := QuotedStr(edIDUNI.Text + '.' + edPTUNI.Text + ' - ' + cbIDUNI.Text);
      DM.frxXLS.FileName := 'relInventLocal.XLSX';

    end else begin
      //qyrec.IndexFieldNames:= 'dsuni_calc';
      DM.LoadReport('inventPorCateg');
      DM.frxRel.Variables['GRUPO'] := QuotedStr(cbIDCAT.Text);
      DM.frxXLS.FileName := 'relInventCateg.XLSX';
    end;


    DM.frxRel.PrepareReport();
    DM.frxXLS.ShowDialogOptions := [doShowSaveDialog];
    DM.frxXLS.OpenAfterExport := true;
    DM.frxRel.Export(DM.frxXLS);
    gViewMov.EndUpdate;
  end;

end;

end.
